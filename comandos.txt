-- Cria um cluster Kubernetes 
kind create cluster --config=k8s/kind.yaml --name=teste

-- acessar o cluster
kubectl cluster-info --context kind-teste

-- listas os cluster existestes
kubectl config get-clusters

-- exclui um cluster
kind delete clusters <name-cluster>

-- Criando o primeiro pod
kubectl apply -f k8s/pod.yaml

-- verificando pods existentes
kubectl get pods

-- Criando um redirecionamento de porta com base em um pod criado
kubectl port-forward pod/goserver 7070:80

-- Delete um pod
kubectl delete pod goserver

-- aplicando o ReplicaSet
kubectl apply -f k8s/replicaset.yaml


-- buscando os replicasets existentes
kubectl get replicasets

-- excluindo um replicaset
kubectl delete replicaset goserver


OBS sobre ReplicaSet:
Mesmo alterando a versão da imagem no arquivo yaml e executando novamente o aplly, 
o kubernets so atualiza os containers com a nova versão quando eu paro o pod e atualizo novamente (Mato o processo e crio novamente).


Hierarquia de grandesa do kubernets
- Deployment -> ReplicaSet -> Pod


Deployment e a versão acima do ReplicaSet, que ja traz a abstração de matar os pods e iniciar novamente
trazendo vantagens de atualização de ambiente com quase nenhuma indisponibilidade.
 
-- Aplicar o deployment
kubectl apply -f k8s/deployment.yaml


-- verificar informações de um pod especifico
kubectl describe pod goserver-66bbbb7c54-2t7l6


-- Rollout e Revisões

-- lista as versoes de um deployment
kubectl rollout history deployment goserver

-- volta para a ultima versão 
kubectl rollout undo deployment goserver

-- volta para a revisão especificada 
kubectl rollout undo deployment goserver --to-revision=1

Services

-- Aplicando um service
kubectl apply -f k8s/service.yaml

-- verificado os services existentes
kubectl get services

-- mapeando uma porta local para o service
kubectl port-forward svc/goserver-service 7070:80

Utilizando proxy para acessar api do Kubernets

-- mapeando a api do kubernets para a porta 8087 para poder acessar
 kubectl proxy --port=8087

// acessando o service criado pela porta exportada
http://localhost:8087/api/v1/namespaces/default/services/goserver-service


Utilizando um arquivo para configuração das variaveis de ambiente - ConfigMap

-- Aplicando a configuração 
kubectl apply -f k8s/configmap-env.yaml

-- apos aplicar tem que realizar o deployment novamente
kubectl apply -f k8s/deployment.yaml

-- Acessar o conteiner dentro de um Pod
kubectl exec -it <namepod> -- bash

-- acessar os logs de um pod
kubectl logs <namepod>


Metrics-Server

link arquivo config: https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
docs: https://github.com/kubernetes-sigs/metrics-server

kubectl apply -f k8s/metrics-server.yaml

-- verificar o quanto de recurso que um pod tem
kubectl top pod goserver-669f6d864d-fw8ht


HPA
-- aplicando a configuração do HPA
kubectl apply -f k8s/hpa.yaml


kubectl get hpa


Teste extress com Fortio

kubectl run -it fortio --rm --image=fortio/fortio -- load -qps 800 -t 120s -c 100 "http://goserver-service/healthz"
